buildscript {

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
    }

    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.3.3.RELEASE")
        classpath("io.spring.gradle:dependency-management-plugin:0.5.1.RELEASE")
        classpath('se.transmode.gradle:gradle-docker:1.2')
    }
}

apply plugin: 'groovy'
apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'maven'
apply plugin: 'spring-boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: "jacoco"
apply plugin: 'docker'
apply plugin: 'sonar-runner'
group = 'com.redbee.io'

springBoot {
    layout = 'ZIP'
}

ext {
    nexusUser = "admin"
    nexusPassword = "R3dB33575"
    nexusUrl =  "http://repo.dev.redbee.io:80/content/repositories/releases/"
    nexusSnapshot = "http://repo.dev.redbee.io:80/content/repositories/snapshots/"
}


jar {
    baseName = 'beertual-tom-api'
}
version = '0.0.1'

repositories {
        mavenCentral()
        mavenLocal()
        jcenter()
        maven {
            credentials {
                username "${nexusUser}"
                password "${nexusPassword}"
            }
            url "${nexusUrl}"
        }
        maven {
            credentials {
                username "${nexusUser}"
                password "${nexusPassword}"
            }
            url "${nexusSnapshot}"
        }
    }

dependencies {
    //Spring dependencies
    compile "ch.qos.logback:logback-classic:1.1.5"
    compile "ch.qos.logback:logback-access:1.1.5"
    compile "ch.qos.logback:logback-core:1.1.5"
    compile "org.springframework.boot:spring-boot:1.3.3.RELEASE"
    compile "org.springframework.boot:spring-boot-starter:1.3.3.RELEASE"
    compile "org.springframework.boot:spring-boot-starter-web:1.3.3.RELEASE"
    compile "org.springframework.boot:spring-boot-actuator:1.3.3.RELEASE"
    compile 'org.springframework.data:spring-data-commons:1.12.1.RELEASE'
    compile "org.springframework.boot:spring-boot-starter-data-mongodb"
    compile("org.springframework.boot:spring-boot-starter-security:1.3.3.RELEASE")
    compile "org.springframework.security.oauth:spring-security-oauth2:2.0.10.RELEASE"
    compile group: 'org.springframework.security', name: 'spring-security-web', version: '4.1.3.RELEASE'

    testCompile "junit:junit:4.8.2"
    testCompile "org.mockito:mockito-core:1.+"
    compile "org.springframework:spring-core:4.2.5.RELEASE"
    compile "org.springframework:spring-context:4.2.5.RELEASE"
    compile "org.springframework:spring-aop:4.2.5.RELEASE"
    compile "org.springframework:spring-tx:4.2.5.RELEASE"
    compile "org.springframework:spring-web:4.2.5.RELEASE"
    compile "org.springframework:spring-expression:4.2.5.RELEASE"
    compile "org.springframework:spring-orm:4.2.5.RELEASE"
    compile "org.springframework:spring-beans:4.2.5.RELEASE"
    compile "org.springframework:spring-aspects:4.2.5.RELEASE"
//    compile group: 'com.redbee', name: 'beertual-tom-repository', version: '1.6.0'

    compile 'org.codehaus.groovy:groovy-all:2.4.5'

    //Test dependencies
    testCompile 'cglib:cglib-nodep:3.1'
    compile 'net.logstash.logback:logstash-logback-encoder:4.5.1'

    testCompile('org.springframework.boot:spring-boot-starter-test',
            'junit:junit:4.12',
            'org.spockframework:spock-core:1.0-groovy-2.4', 'cglib:cglib:3.1')
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination "${buildDir}/jacocoHtml"
    }
}

task wrapper(type: org.gradle.api.tasks.wrapper.Wrapper) {
    gradleVersion = '2.4'
}

docker {
    baseImage("java:8")
    maintainer("Redbee")
}

task buildDocker(type: Docker, dependsOn: build) {
    push = false
    dryRun = true
    applicationName = jar.baseName

    // dockerfile = file('src/main/docker/Dockerfile')
    doFirst {
        copy {
            from jar
            into stageDir
        }
    }

    volume("/tmp", "/newrelic", "/log")
    addFile("${jar.baseName}-${project.version}.jar", "app.jar")
    runCommand("bash -c 'touch /app.jar'")
    entryPoint(["java","-Djava.security.egd=file:/dev/./urandom","-jar","/app.jar"])
}


bootRun {
    //jvmArgs = ["-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005"]
}
